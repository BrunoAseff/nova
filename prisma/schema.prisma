// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    password        String?
    emailVerified   DateTime?
    dataMigrated Boolean   @default(false)
    image           String?
    resetToken      String?   @unique
    resetTokenExpiry DateTime?
    accounts        Account[]
    sessions        Session[]
    settings        Settings?
    stripeCustomerId  String?  @unique
    subscriptionStatus String? 
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Settings {
    id                  String      @id @default(cuid())
    userId              String      @unique
    user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    ambientSound        String?
    isAmbientSoundPlaying Boolean   @default(false)
    shortcut            String?
    spaces              Space[]
    reminders           Reminder[]
    lastModified        DateTime    @default(now()) @updatedAt    
}

model Space {
    id                  String      @id @default(cuid())
    clientId            Int         @default(0)
    settingsId          String
    settings            Settings    @relation(fields: [settingsId], references: [id], onDelete: Cascade)
    name                String
    clockIsHidden       Boolean     @default(false)
    clockPosition       String?     // E.g., "center", "top-right"
    clockTimeFormat     String?     // E.g., "24h" or "12h"
    pomodoroIsHidden    Boolean     @default(true)
    shortBreakDuration  Int         @default(5)
    longBreakDuration   Int         @default(15)
    pomodoroAutoStart   Boolean     @default(false)
    alarmSound          Boolean     @default(true)
    alarmSoundURL       String?
    alarmRepeatTimes    Int         @default(3)
    breathingIsHidden   Boolean     @default(true)
    breathingTechnique  String?     // E.g., "Box Breathing"
    reminderIsHidden    Boolean     @default(true)
    reminderPosition    String?     // E.g., "top-right"
    quoteIsHidden       Boolean     @default(false)
    quotePosition       String?     // E.g., "bottom-left"
    background          String?     // URL of the background image
}

model Reminder {
    id          String  @id @default(cuid())
    settingsId  String
    settings    Settings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
    message     String
    type    String? // E.g., "top-right"
}
